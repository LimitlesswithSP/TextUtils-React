{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","aria-checked","htmlFor","switchText","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","trim","filter","element","Alert","height","alert","word","lower","charAt","slice","capitalize","msg","defaultProps","aboutText","App","setMode","_useState3","_useState4","setSwitchText","_useState5","_useState6","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.21b4b87d.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            {/* <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                            <a className=\"nav-link\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                        </li> */}\r\n                    </ul>\r\n                    {/* <div className=\"d-flex\">\r\n                        <div className=\"bg-primary rounded mx-2\" onClick={() => { props.toggleMode('primary') }} style={{ height: '30px', width: '30px', cursor: 'pointer' }}></div>\r\n                        <div className=\"bg-danger rounded mx-2\" onClick={() => { props.toggleMode('danger') }} style={{ height: '30px', width: '30px', cursor: 'pointer' }}></div>\r\n                        <div className=\"bg-success rounded mx-2\" onClick={() => { props.toggleMode('success') }} style={{ height: '30px', width: '30px', cursor: 'pointer' }}></div>\r\n                        <div className=\"bg-warning rounded mx-2\" onClick={() => { props.toggleMode('warning') }} style={{ height: '30px', width: '30px', cursor: 'pointer' }}></div>\r\n                        <div className=\"bg-light rounded mx-2\" onClick={() => { props.toggleMode('light') }} style={{ height: '30px', width: '30px', cursor: 'pointer' }}></div>\r\n                        <div className=\"bg-dark rounded mx-2\" onClick={() => { props.toggleMode('dark') }} style={{ height: '30px', width: '30px', cursor: 'pointer' }}></div>\r\n                    </div> */}\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'} mx-3`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" aria-checked=\"false\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.switchText}</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"Set title here\",\r\n    aboutText: \"About Us\"\r\n}","import React, { useState } from 'react';\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState(\"\");\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \").trim());\r\n        props.showAlert(\"Extra Spaces Removed!\", \"success\");\r\n    }\r\n\r\n    const handleCopyClick = () => {\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert(\"Text copied to clipboard!\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"Text cleared!\", \"success\");\r\n    }\r\n\r\n    const handleLowClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to LowerCase!\", \"success\");\r\n    }\r\n\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to UpperCase!\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='container' style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>\r\n                <h1 className='mb-3'>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{ backgroundColor: props.mode === 'dark' ? '#13466e' : 'white', color: props.mode === 'dark' ? 'white' : '#042743' }} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLowClick}>Convert to Lowercase</button>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-1 my-1\" onClick={handleClearClick}>Clear Text</button>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopyClick}>Copy Text</button>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>\r\n                <h2>Your text summary</h2>\r\n                <p>{text.split(/\\s+/).filter((element) => { return (element.length !== 0) }).length} words and {text.length} characters</p>\r\n                <p>{0.008 * (text.split(/\\s+/).filter((element) => { return (element.length !== 0) }).length)} Minutes to read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length > 0 ? text : \"Nothing to preview!\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        <div style={{ height: '50px' }}>\r\n            {props.alert &&\r\n                <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                    <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n                </div>}\r\n        </div>\r\n    )\r\n}","import \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from 'react';\nimport Alert from \"./components/Alert\";\n// import About from \"./components/About\";\n// import {\n//   BrowserRouter,\n//   Routes,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');  // Whether dark or light mode is enabled or not\n\n  const [switchText, setSwitchText] = useState(\"Enable Dark Mode\"); // to change the text of the switch\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  // const removeBodyClasses = () => {\n  //   document.body.classList.remove('bg-light');\n  //   document.body.classList.remove('bg-dark');\n  //   document.body.classList.remove('bg-warning');\n  //   document.body.classList.remove('bg-danger');\n  //   document.body.classList.remove('bg-success');\n  //   document.body.classList.remove('bg-primary');\n  // }\n\n  // const toggleMode = (cls) => {\n  //   removeBodyClasses();\n  //   document.body.classList.add('bg-' + cls);\n  //   if (mode === 'light') {\n  //     setMode('dark');\n  //     document.body.style.backgroundColor = '#042743';\n  //     showAlert(\"Dark mode has been enabled\", \"success\");\n  //     setSwitchText(\"Enable Light Mode\");\n  //   }\n  //   else {\n  //     setMode('light');\n  //     document.body.style.backgroundColor = 'white';\n  //     showAlert(\"Light mode has been enabled\", \"success\");\n  //     setSwitchText(\"Enable Dark Mode\");\n  //   }\n  // }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      setSwitchText(\"Enable Light Mode\");\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      setSwitchText(\"Enable Dark Mode\");\n    }\n  }\n\n  return (\n    <>\n      {/* <BrowserRouter>\n        <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" mode={mode} toggleMode={toggleMode} switchText={switchText} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Routes>\n            <Route exact path=\"/\" element={<TextForm heading=\"Try TextUtils - Word Counter, Character Counter, Remove Extra Spaces\" mode={mode} showAlert={showAlert} />} />\n            <Route exact path=\"/about\" element={<About mode={mode} />} />\n          </Routes>\n        </div>\n      </BrowserRouter> */}\n      <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" mode={mode} toggleMode={toggleMode} switchText={switchText} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        <TextForm heading=\"Try TextUtils - Word Counter, Character Counter, Remove Extra Spaces\" mode={mode} showAlert={showAlert} />\n      </div>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}